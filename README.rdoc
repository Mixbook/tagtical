= Tagtical

This plugin was originally based on acts_as_taggable_on by Michael Bleigh. That plugin
was based on acts_as_taggable_on_steroids by Jonathan Viney.

While a lot concepts are the same (taggings + tags tables using polymorphism), this adaption introduces
the concept of "relevance" for a tag and allows for the creation of subclasses on Tag.

For instance, if you want to tag a photo with "Mood Tags". You would simply subclass Tag with
Tag::Mood and you could add functionality specific to that model. This involves moving the "context"
off of Tagging and moving it onto Tag as a "type" column. It acts not only as a "context", but also
as a designator for the STI class. Subsequently, you could also add a "relevance" for how applicable
that mood is.

Tagtical allows for an arbitrary number of Tag subclasses, each of which can be extended to the needs
of the application.

Here are the main differences between tagtical and acts_as_taggable_on:

1. Add "relevance" to the Tag class so you can weight the tags to the object
2. Tagtical removes "context" off the taggings table and adds "type" onto the tags table.
3. custom_contexts (on the fly) contexts are removed since every tag type must map to a defined class.
4. The traditional functionality of tags is preserved while laying the foundation for STI on the Tag
class. You can choose to extend the Tag class with things that may not be interpreted as language (ie color hex codes or geo locations).
5. Tag "names" now become tag "values". The difference is small, but significant. If you had
GeoTag's, for example, you wouldn't refer to its "name", you would refer to its "value". The value
could be a serialized field of long and lat if you wanted.
6. Add ability to not have multiple taggers for a given tag. In other words, you can specify in a
config file whether a taggable model can have the same tags from multiple different taggers.

Additions include:
1. Scopes are created on Tag so you can do photo.tags.color and grab all the tags of type Tag::Color

== Installation

=== Rails 2.3.x

Tagtical is tested to work in Rails 2.3.5.

==== Plugin

Tagtical is available both as a gem and as a traditional plugin. For the
traditional plugin you can install like so:

  script/plugin install git://github.com/mbleigh/tagtical.git

Tagtical is also available as a gem plugin using Rails 2.1's gem dependencies.
To install the gem, add this to your config/environment.rb:
  
  config.gem "tagtical", :source => "http://gemcutter.org", :version => '2.0.0.rc1'
  
After that, you can run "rake gems:install" to install the gem if you don't already have it.

==== Post Installation

1. script/generate tagtical_migration
2. rake db:migrate

=== Rails 3.0

Tagtical is now useable in Rails 3.0, thanks to the excellent work of Szymon Nowak
and Jelle Vandebeeck.

To use it, add it to your Gemfile:
  
  gem 'tagtical'

==== Post Installation

1. rails generate tagtical:migration
2. rake db:migrate

== Testing

Tagtical uses RSpec for its test coverage. Inside the plugin
directory, you can run the specs for RoR 3.0.0 with:

  rake spec

If you want to test the plugin for Rails 2.3.x, use:

  rake rails2.3:spec

If you already have RSpec on your application, the specs will run while using:

rake spec:plugins


== Usage

    class User < ActiveRecord::Base
      # Alias for <tt>tagtical :tags</tt>:
      acts_as_taggable
      tagtical :skills, :interests
    end

    @user = User.new(:name => "Bobby")
    @user.tag_list = "awesome, slick, hefty"      # this should be familiar
    @user.skill_list = "joking, clowning, boxing" # but you can do it for any context!
    @user.skill_list                              # => ["joking","clowning","boxing"] as TagList
    @user.save

    @user.tags # => [<Tag value:"awesome">,<Tag value:"slick">,<Tag value:"hefty">]
    @user.skills # => [<Tag value:"joking">,<Tag value:"clowning">,<Tag value:"boxing">]

    @frankie = User.create(:name => "Frankie", :skill_list => "joking, flying, eating")
    User.skill_counts # => [<Tag value="joking" count=2>,<Tag value="clowning" count=1>...]
    @frankie.skill_counts

=== Finding Tagged Objects

Tagtical utilizes named_scopes to create an association for tags.
This way you can mix and match to filter down your results, and it also improves
compatibility with the will_paginate gem:

    class User < ActiveRecord::Base
      tagtical :tags
      named_scope :by_join_date, :order => "created_at DESC"
    end

    User.tagged_with("awesome").by_date
    User.tagged_with("awesome").by_date.paginate(:page => params[:page], :per_page => 20)

    # Find a user with matching all tags, not just one
    User.tagged_with(["awesome", "cool"], :match_all => :true)
    
    # Find a user with any of the tags:
    User.tagged_with(["awesome", "cool"], :any => true)

=== Relationships

You can find objects of the same type based on similar tags on certain contexts.
Also, objects will be returned in descending order based on the total number of 
matched tags.

    @bobby = User.find_by_name("Bobby")
    @bobby.skill_list # => ["jogging", "diving"]

    @frankie = User.find_by_name("Frankie")
    @frankie.skill_list # => ["hacking"]

    @tom = User.find_by_name("Tom")
    @tom.skill_list # => ["hacking", "jogging", "diving"]

    @tom.find_related_skills # => [<User name="Bobby">,<User name="Frankie">]
    @bobby.find_related_skills # => [<User name="Tom">] 
    @frankie.find_related_skills # => [<User name="Tom">] 

=== Dynamic Tag Contexts

In addition to the generated tag contexts in the definition, it is also possible
to allow for dynamic tag contexts (this could be user generated tag contexts!)

    @user = User.new(:name => "Bobby")
    @user.set_tag_list_on(:customs, "same, as, tag, list")
    @user.tag_list_on(:customs) # => ["same","as","tag","list"]
    @user.save
    @user.tags_on(:customs) # => [<Tag value='same'>,...]
    @user.tag_counts_on(:customs)
    User.tagged_with("same", :on => :customs) # => [@user]

=== Tag Ownership

Tags can have owners:

    class User < ActiveRecord::Base
      acts_as_tagger
    end

    class Photo < ActiveRecord::Base
      tagtical :locations
    end

    @some_user.tag(@some_photo, :with => "paris, normandy", :on => :locations)
    @some_user.owned_taggings
    @some_user.owned_tags
    @some_photo.locations_from(@some_user)
    
=== Tag cloud calculations

To construct tag clouds, the frequency of each tag needs to be calculated.
Because we specified +tagtical+ on the <tt>User</tt> class, we can
get a calculation of all the tag counts by using <tt>User.tag_counts_on(:customs)</tt>. But what if we wanted a tag count for
an single user's posts? To achieve this we call tag_counts on the association:

  User.find(:first).posts.tag_counts_on(:tags)

A helper is included to assist with generating tag clouds.

Here is an example that generates a tag cloud.

Helper:

  module PostsHelper
    include Tagtical::TagsHelper
  end

Controller:

  class PostController < ApplicationController
    def tag_cloud
      @tags = Post.tag_counts_on(:tags)
    end
  end

View:

  <% tag_cloud(@tags, %w(css1 css2 css3 css4)) do |tag, css_class| %>
    <%= link_to tag.value, { :action => :tag, :id => tag.value }, :class => css_class %>
  <% end %>

CSS:

  .css1 { font-size: 1.0em; }
  .css2 { font-size: 1.2em; }
  .css3 { font-size: 1.4em; }
  .css4 { font-size: 1.6em; }

== Contributors

* TomEric (i76) - Maintainer
* Michael Bleigh - Original Author
* Szymon Nowak - Rails 3.0 compatibility
* Jelle Vandebeeck - Rails 3.0 compatibility
* Brendan Lim - Related Objects
* Pradeep Elankumaran - Taggers
* Sinclair Bain - Patch King

=== Patch Contributors

* tristanzdunn - Related objects of other classes
* azabaj - Fixed migrate down
* Peter Cooper - named_scope fix
* slainer68 - STI fix
* harrylove - migration instructions and fix-ups
* lawrencepit - cached tag work
* sobrinho - fixed tag_cloud helper

Copyright (c) 2007-2010 Michael Bleigh (http://mbleigh.com/) and Intridea Inc. (http://intridea.com/), released under the MIT license
